export default Autocomplete;
declare class Autocomplete {
    constructor(element: any);
    element: any;
    options: {
        debounce: number;
        characters: number;
        populate: boolean;
        searchData(query: any, cb: any, eventType: any): void;
        onClick(option: any, obj: any, event: any, cb: any): void;
    };
    input: any;
    results: any;
    resultsList: any;
    ariaResult: any;
    resultClassName: string;
    inputVal: string;
    typeId: boolean;
    searching: boolean;
    searchingClass: string;
    dropdownActiveClass: string;
    truncateDropdown: boolean;
    autocompleteClosed: boolean;
    clone: boolean;
    selectedLabelElement: boolean;
    init(): void;
    initAutocompleteAria(): void;
    initAutocompleteTemplates(): void;
    templateItems: any;
    templates: any[] | undefined;
    initAutocompleteEvents(): void;
    checkFocusLost(event: any): void;
    handleInputTyped(event: any): void;
    moveFocusToList(): void;
    updateSearch(bool: any): void;
    toggleOptionsList(bool: any): void;
    truncateAutocompleteList(): void;
    updateResultsList(eventType: any): void;
    updateAriaRegion(): void;
    resultsItems: any;
    resetSearch(): void;
    navigateList(event: any): void;
    getElementFocusbleIndex(index: any, nextItem: any): any;
    elementListIsFocusable(index: any): boolean;
    getListFocusableEl(index: any): any;
    selectResult(result: any, event: any): void;
    getResultContent(result: any): any;
    populateResults(data: any, cb: any): void;
    getItemHtml(data: any): any;
    getClone(data: any): any;
    setLabel(label: any): void;
    setClass(classList: any): void;
    setUrl(url: any): void;
    setSrc(src: any): void;
    setKey(key: any, value: any): void;
}
