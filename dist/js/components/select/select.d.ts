export default Select;
declare class Select {
    static trapFocus(element: any): void;
    static createSafeCss(str: any): string;
    static moveFocusFn(element: any): void;
    constructor(element: any);
    element: any;
    select: any;
    optGroups: any;
    options: any;
    selectId: any;
    trigger: boolean;
    dropdown: boolean;
    customOptions: boolean;
    list: boolean;
    allButton: boolean;
    arrowIcon: any;
    label: Element | null;
    selectedOptCounter: number;
    optionIndex: number;
    noSelectText: any;
    multiSelectText: any;
    nMultiSelect: any;
    noUpdateLabel: any;
    insetLabel: any;
    hideClass: string;
    showClass: string;
    errorClass: string;
    srClass: string;
    prefix: string;
    class: string;
    buttonClass: string;
    allButtonClass: string;
    listClass: string;
    optionClass: string;
    dropdownClass: string;
    checkboxClass: string;
    itemClass: string;
    labelClass: string;
    termClass: string;
    detailsClass: string;
    selectClass: string;
    checkboxLabelClass: string;
    checkboxInputClass: string;
    init(): void;
    initCustomSelectEvents(): void;
    toggleCustomSelect(bool: any): void;
    placeDropdown(): void;
    keyboardCustomSelect(direction: any, event: any): void;
    toggleAllButton(): void;
    initSelection(): void;
    selectOption(option: any): void;
    updateAllButton(): void;
    updateNativeSelect(index: any, bool: any): void;
    updateTriggerAria(ariaLabel: any): void;
    getSelectedOptionText(): any[];
    initButtonSelect(): string;
    initListSelect(): string;
    initAllButton(): string;
    getSelectLabelSR(): string;
    getOptionsList(options: any): string;
    getSelectedOption(): any;
    getOptions(): (number | any[])[];
    moveFocusToSelectTrigger(): void;
    checkCustomSelectClick(target: any): void;
}
